#!/bin/sh

. /etc/rc.conf
. /etc/rubixlib

# Set the path.
PATH=/bin:/sbin:/usr/bin:/usr/sbin

# Set linefeed mode to avoid staircase effect.
stty onlcr

#get off the login prompt
printsep

# Find out how we were called.
case "$0" in
	*0)
		command="halt"
		printh1 "halting the computer"
		;;
	*6)
		command=reboot
		printh1 "rebooting the computer"
		;;
	*)
		stat_err "$0: call me as \"rc.0\" or \"rc.6\" please!"
		exit 1
		;;
esac

printsep

if [ -x /etc/rc.shutdown ]; then
	stat_busy "running /etc/rc.shutdown"
	/etc/rc.shutdown
	stat_done
fi

# Save the system time to the hardware clock using hwclock --systohc.
if [ -x /sbin/hwclock ]; then
	# Check for a broken motherboard RTC clock (where ioports for rtc are
	# unknown) to prevent hwclock causing a hang:
	if ! grep -q -w rtc /proc/ioports ; then
		CLOCK_OPT="--directisa"
	fi
	stat_busy "saving system time"
	if [ "$HARDWARECLOCK" = "UTC" ]; then
		/sbin/hwclock $CLOCK_OPT --utc --systohc
	else
		/sbin/hwclock  $CLOCK_OPT --localtime --systohc
	fi
	stat_done
fi

# Shut down the wireless connection
if [ ! -f /var/run/daemons/wlan-config -a -x /usr/sbin/wlan-config -a -r /var/run/wlan-config ]; then
	stat_busy "shutting down wifi"
	/usr/sbin/wlan-config disconnect
	stat_done
fi

if [ "$PREVLEVEL" = "2" -o "$PREVLEVEL" = "3" -o "$PREVLEVEL" = "4" -o "$PREVLEVEL" = "5" ]; then
	# Shutdown daemons
	let i=${#DAEMONS[@]}
	while [[ i -ge 0 ]]; do
		if [[ `echo ${DAEMONS[$i]} | grep '^[^\!]' | wc -l` -eq 1 ]]; then
			/etc/rc.d/${DAEMONS[$i]#@} stop
		fi
		let i=i-1
	done
	# find any leftover daemons and shut them down
	if [ -d /var/run/daemons ]; then
		for daemon in `ls /var/run/daemons`; do
			/etc/rc.d/$daemon stop
		done
	fi
fi

# Kill all processes.
# INIT is supposed to handle this entirely now, but this didn't always
# work correctly without this second pass at killing off the processes.
# Since INIT already notified the user that processes were being killed,
# we'll avoid echoing this info this time around.
if [ "$1" != "fast" ]; then # shutdown did not already kill all processes
	stat_busy "killing all processes"
	killall5 -15
	sleep 5
	killall5 -9
	stat_done
fi

stat_busy "deactivating environment"

# If it looks like we use an initrd, prepare for one at next boot:
if grep -q -w initrd /var/log/messages ; then
	mkdir -p /initrd
fi

# Carry a random seed between reboots.
# Use the pool size from /proc, or 512 bytes:
if [ -r /proc/sys/kernel/random/poolsize ]; then
	dd if=/dev/urandom of=/etc/random-seed count=1 bs=$(cat /proc/sys/kernel/random/poolsize) 2> /dev/null
else
	dd if=/dev/urandom of=/etc/random-seed count=1 bs=512 2> /dev/null
fi
chmod 600 /etc/random-seed

# Before unmounting file systems write a reboot or halt record to wtmp.
$command -w

# Clear /var/lock/subsys.
if [ -d /var/lock/subsys ]; then
	rm -f /var/lock/subsys/*
fi

stat_done

# A function to deactivate LVM volume groups:
deactivate_lvm() {
	if [ -r /etc/lvmtab -o -d /etc/lvm/backup ]; then
		stat_busy "deactivating lvm"
		if cat /proc/sys/kernel/osrelease | cut -f 1,2 -d . | grep -q -w 2.4 2> /dev/null ; then
			/sbin/vgchange -an > /dev/null 2>&1
		else
			/sbin/vgchange -an --ignorelockingfailure > /dev/null 2>&1
		fi
		sleep 10
		stat_done
	fi
}

# Turn off swap, then unmount local file systems.
stat_busy "disabling swap"
swapoff -a
sync
stat_done

stat_busy "unmounting filesystems"
umount -a -t nonfs,noproc,nosysfs
stat_done

deactivate_lvm

umount -a -r -t nonfs,noproc,nosysfs

stat_busy "remounting root filesystem"
mount -n -o remount,ro /

# This never hurts:
sync

# sleep 1 fixes problems with some hard drives that don't
# otherwise finish syncing before reboot or poweroff
sleep 1

stat_done

# This is to ensure all processes have completed on SMP machines:
wait

if [ -x /sbin/genpowerd ]; then
	# See if this is a powerfail situation:
	if egrep -q "FAIL|SCRAM" /etc/upsstatus 2> /dev/null ; then
		# Signal UPS to shut off the inverter:
		/sbin/genpowerd -k
		if [ ! $? = 0 ]; then
			stat_err "There was an error signaling the UPS."
			stat_err "Perhaps you need to edit /etc/genpowerd.conf to configure"
			stat_err "the serial line and UPS type."
			# Wasting 15 seconds of precious power:
			sleep 15
		fi
	fi
fi

# Now halt (poweroff with APM or ACPI enabled kernels) or reboot.
if [ "$command" = "reboot" ]; then
	printsep
	printh1 "rebooting"
	printsep
	reboot -d -f -i
else
	printsep
	printh1 "powering down"
	printsep
	poweroff -d -f -h -i
fi

# End of file
