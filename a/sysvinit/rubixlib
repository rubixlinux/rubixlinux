#!/bin/bash

STAT_COL=$((`stty size | cut -d' ' -f2`-5))

C_MAIN="\e[1;37m"
C_OTHER="\e[1;34m"
C_SEPARATOR="\e[1;30m"

C_BUSY="\e[1;36m"
C_FAIL="\e[1;31m"
C_DONE="\e[1;32m"
C_BKGD="\e[1;35m"
C_WARN="\e[1;33m"
C_INFO="\e[1;36m"

C_H1="\e[1;37m"
C_H2="\e[1;36m"

C_CLEAR="\033[1;0m"

PREFIX_REG=":: "
PREFIX_HL=" > "

deltext() {
	echo -ne "\e[${STAT_COL}G"
}

printh1() {
	echo -e "$C_OTHER$PREFIX_HL$C_H1$*$C_CLEAR"
}

printh2() {
	echo -e "$C_OTHER$PREFIX_HL$C_H2$*$C_CLEAR"
}

printsep() {
	echo -e "\n$C_SEPARATOR   ------------------------------\n$C_CLEAR"
}

stat_bkgd() {
	echo -ne "$C_OTHER$PREFIX_REG$C_MAIN$*"
	deltext
	echo -e "$C_OTHER[${C_BKGD}BKGD$C_OTHER]$C_CLEAR"
}

stat_busy() {
	echo -ne "$C_OTHER$PREFIX_REG$C_MAIN$*"
	deltext
	echo -ne "$C_OTHER[${C_BUSY}BUSY$C_OTHER]$C_CLEAR"
}

stat_done() {
	deltext
	echo -e "$C_OTHER[${C_DONE}DONE$C_OTHER]$C_CLEAR"
}

stat_fail() {
	deltext >&2
	echo -e "$C_OTHER[${C_FAIL}FAIL$C_OTHER]$C_CLEAR" >&2
	return 1
}

stat_running() {
	deltext
	echo -e "$C_OTHER[${C_WARN}RUNN$C_OTHER]$C_CLEAR"
	return 1
}

stat_notrunning() {
	deltext
	echo -e "$C_OTHER[${C_WARN}NORN$C_OTHER]$C_CLEAR"
	return 1
}

stat_main() {
	echo -e "$C_MAIN$*$C_CLEAR"
}

stat_err() {
	echo -e "$C_FAIL$*$C_CLEAR" >&2
	return 1
}

stat_info() {
	echo -ne "$C_OTHER$PREFIX_REG$C_MAIN$*"
	deltext
	echo -e "$C_OTHER[${C_INFO}INFO$C_OTHER]$C_CLEAR"
}

check_root() {
	if [ $UID != 0 ]; then
		stat_err "You are not root!"
		exit 1
	fi
}

write_log() {
	DAEMON=$1
	shift
	STATUS=$*

	LOG=/var/log/daemon

	for stat in started start_failed stopped stop_failed; do
		if [ ! -d $LOG/$stat ]; then
			mkdir -p $LOG/$stat
		fi
		if [ "$STATUS" != "$stat" ]; then
			rm -f $LOG/$stat/$DAEMON
		else
			touch $LOG/$stat/$DAEMON
		fi
	done
}

start_daemon() {
	DAEMON=$1
	shift
	BIN=$*

	check_root
	stat_busy "starting $DAEMON"
	if [ ! -f /var/run/daemons/$DAEMON ]; then
		if [ "$BIN" = "${BIN#@}" ]; then
			$BIN > /dev/null
		else
			(${BIN:1}) > /dev/null &
		fi
		if [ $? -eq 0 ]; then
			stat_done
			touch /var/run/daemons/$DAEMON
			write_log $DAEMON started
			return 0
		else
			stat_fail
			write_log $DAEMON start_failed
			return 1
		fi
	else
		stat_running
		return 1
	fi
}

stop_daemon() {
	DAEMON=$1
	shift
	BIN=$1
	shift
	STOPCMD=$*

	check_root
	PID=`pidof -o %PPID $BIN`
	stat_busy "stopping $DAEMON"
	if [ ! -f /var/run/daemons/$DAEMON ]; then
		stat_notrunning
		return 1
	else
		if [ -z "$STOPCMD" -a ! -z "$PID" ]; then
			kill $PID &> /dev/null
		elif [ ! -z "$STOPCMD" ]; then
			$BIN $STOPCMD &> /dev/null
		fi
		if [ $? -eq 0 ]; then
			stat_done
			write_log $DAEMON stopped
			rm -f /var/run/daemons/$DAEMON
			return 0
		else
			stat_fail
			write_log $DAEMON stop_failed
			return 1
		fi
	fi
}

daemon_status() {
	DAEMON=$1
	BIN=$2

	PID=`pidof -o %PPID $BIN`
	echo -ne "$C_MAIN$DAEMON "
	if [ ! -f /var/run/daemons/$DAEMON ]; then
		echo -e "is ${C_FAIL}NOT${C_MAIN} running$C_CLEAR"
		return 1
	else
		echo -e "${C_DONE}IS${C_MAIN} running$C_CLEAR"
		if [ "$PID" != "" ]; then
			echo -e "  ${C_MAIN}$BIN pid: $PID$C_CLEAR"
		fi
		return 0
	fi
}
